<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
				"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
				"https://checkstyle.org/dtds/configuration_1_3.dtd">

<!-- References: https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml-->
<module name="Checker">
	<property name="charset" value="UTF-8"/>
	<property name="severity" value="warning"/>
	<property name="fileExtensions" value="java"/>
	<property name="haltOnException" value="false"/>

	<module name="NewlineAtEndOfFile"/>
	<!-- Excludes all 'module-info.java' files              -->
	<!-- See https://checkstyle.org/config_filefilters.html -->
	<module name="BeforeExecutionExclusionFileFilter">
		<property name="fileNamePattern" value="module\-info\.java$"/>
	</module>
	<!-- Checks for whitespace                               -->
	<!-- See http://checkstyle.sf.net/config_whitespace.html -->
	<module name="FileTabCharacter">
		<property name="eachLine" value="true"/>
	</module>
	<!-- Regexp  -->
	<module name="RegexpSingleline">
		<property name="format" value="File \| Settings \| File Templates"/>
	</module>
	<module name="RegexpSingleline">
		<property name="format" value="^\s*\*\s*@author"/>
	</module>
	<module name="TreeWalker">
		<module name="OuterTypeFilename"/>
		<!-- Metrics -->
		<module name="BooleanExpressionComplexity"/>
		<module name="ClassDataAbstractionCoupling">
			<property name="max" value="4"/>
		</module>
		<module name="ClassFanOutComplexity">
			<property name="max" value="13"/>
		</module>
		<module name="CyclomaticComplexity">
			<property name="max" value="9"/>
			<property name="switchBlockAsSingleDecisionPoint" value="true"/>
		</module>
		<module name="NPathComplexity">
			<property name="max" value="24"/>
		</module>
		<module name="JavaNCSS">
			<property name="methodMaximum" value="20"/>
		</module>
		<!-- Blocks -->
		<module name="EmptyBlock">
			<property name="tokens" value="LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_IF,LITERAL_FOR,LITERAL_TRY,LITERAL_WHILE,INSTANCE_INIT,STATIC_INIT"/>
		</module>
		<module name="EmptyBlock">
			<property name="option" value="text"/>
			<property name="tokens" value="LITERAL_CATCH"/>
		</module>
		<module name="AvoidNestedBlocks"/>
		<!-- Braces -->
		<module name="NeedBraces"/>
		<!-- Whitespace -->
		<module name="GenericWhitespace"/>
		<module name="EmptyForInitializerPad"/>
		<module name="EmptyForIteratorPad"/>
		<module name="MethodParamPad"/>
		<module name="NoWhitespaceBefore"/>
		<module name="NoWhitespaceAfter"/>
		<module name="OperatorWrap"/>
		<module name="ParenPad"/>
		<module name="TypecastParenPad"/>
		<module name="WhitespaceAfter">
			<property name="tokens" value="COMMA, SEMI"/>
		</module>
		<module name="WhitespaceAround">
			<!--  everything except { and } -->
			<property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND"/>
		</module>
		<module name="SeparatorWrap">
			<property name="tokens" value="DOT"/>
			<property name="option" value="nl"/>
		</module>
		<module name="SeparatorWrap">
			<property name="tokens" value="COMMA"/>
			<property name="option" value="EOL"/>
		</module>
		<!-- Coding -->
		<module name="CovariantEquals"/>
		<module name="DefaultComesLast"/>
		<module name="EmptyStatement"/>
		<module name="EqualsHashCode"/>
		<module name="ExplicitInitialization"/>
		<module name="MultipleVariableDeclarations"/>
		<module name="NoClone"/>
		<module name="NoFinalizer"/>
		 <module name="SimplifyBooleanExpression"/>
		 <module name="SimplifyBooleanReturn"/>
		 <module name="StringLiteralEquality"/>
		 <module name="UnnecessaryParentheses"/>
		 <module name="OneStatementPerLine"/>
		 <module name="MultipleVariableDeclarations"/>
		 <module name="MissingSwitchDefault"/>
		 <module name="FallThrough"/>
		 <module name="OverloadMethodsDeclarationOrder"/>
		 <module name="VariableDeclarationUsageDistance"/>
		 <!-- Modifiers -->
		 <module name="ModifierOrder"/>
		 <!-- Design -->
		 <module name="InterfaceIsType"/>
		 <!-- Imports -->
		 <module name="RedundantImport"/>
		 <module name="UnusedImports"/>
		 <!-- Naming Conventions-->
		 <module name="ClassTypeParameterName">
			 <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
		 </module>
		 <module name="ConstantName"/>
		 <module name="LocalFinalVariableName"/>
		 <module name="LocalVariableName">
			 <property name="tokens" value="VARIABLE_DEF"/>
			 <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
			 <property name="allowOneCharVarInForLoop" value="true"/>
		 </module>
		 <module name="MemberName">
			 <property name="format" value="^[a-z_][a-zA-Z0-9_]*$"/>
		 </module>
		 <module name="MethodName">
			 <property name="format" value="^[a-z_][a-zA-Z0-9_]*$"/>
		 </module>
		 <module name="MethodTypeParameterName">
			 <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
		 </module>
		 <module name="PackageName">
			 <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
		 </module>
		 <module name="ParameterName"/>
		 <module name="StaticVariableName"/>
		 <module name="TypeName"/>
		 <module name="ParameterName">
			 <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
		 </module>
		 <!-- Miscellaneous -->
		 <module name="UpperEll"/>
	 </module>
</module>
